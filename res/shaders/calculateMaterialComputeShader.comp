#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 10, local_size_y = 10, local_size_z = 10) in;

struct DensityPrimitive
{
    vec4 position;
    vec4 size;
};

layout (std430, binding = 0) buffer layoutName {
    int permutations[];
};

layout (std430, binding = 1) buffer primitivesLayout{
    DensityPrimitive primitiveMods[];
};

layout (std430, binding = 2) buffer layoutMaterial {
    int elem[];
} cornerMaterials;

int N = 2;
uniform int simpleScale;  //primitiveModCount
uniform vec3 offcet;

vec3 Grad3[] = {
    vec3(1,1,0), vec3(-1,1,0), vec3(1,-1,0), vec3(-1,-1,0),
    vec3(1,0,1), vec3(-1,0,1), vec3(1,0,-1), vec3(-1,0,-1),
    vec3(0,1,1), vec3(0,-1,1), vec3(0,1,-1), vec3(0,-1,-1)
};

float Perlin(float x, float y)
{
    int i = x > 0 ? int(x) : int(x) - 1;
    int j = y > 0 ? int(y) : int(y) - 1;

    x = x - i;
    y = y - j;

    i = i & 255;
    j = j & 255;

int gll = permutations[i + permutations[j]] % 12;
int glh = permutations[i + permutations[j + 1]] % 12;
int ghl = permutations[i + 1 + permutations[j]] % 12;
int ghh = permutations[i + 1 + permutations[j + 1]] % 12;

float nll = (Grad3[gll].x * x) + (Grad3[gll].y * y);
float nlh = (Grad3[glh].x * x) + (Grad3[glh].y * (y - 1));
float nhl = (Grad3[ghl].x * (x - 1)) + (Grad3[ghl].y * y);
float nhh = (Grad3[ghh].x * (x - 1)) + (Grad3[ghh].y * (y - 1));

float u = float(x * x * x * (x * (x * 6 - 15) + 10));
float v = float(y * y * y * (y * (y * 6 - 15) + 10));

//float nyl = Mathf.Lerp(nll, nhl, u);
float nyl = (1-u)*nll + u*nhl;
//float nyh = Mathf.Lerp(nlh, nhh, u);
float nyh = (1-u)*nlh + u*nhh;

//float nxy = Mathf.Lerp(nyl, nyh, v);
float nxy = (1-v)*nyl + v*nyh;

return nxy;
}

float FractalNoise(int octaves, float frequency, float lacunarity, float persistence, vec2 position)
{
    float SCALE = 1.0f / 128.0f;
    vec2 p = position * SCALE;
    float nois = 0.0f;

    float amplitude = 1.0f;
    p *= frequency;

    for (int i = 0; i < octaves; i++)
    {
        nois += Perlin(p.x, p.y) * amplitude;
        p *= lacunarity;
        amplitude *= persistence;
    }

    return 0.5f + (0.5f * nois);
}

float Density_Func(vec2 pos){
    return FractalNoise(4, 0.5343f, 2.2324f, 0.68324f, pos);
}

vec2 fade(vec2 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}

float cnoise(vec2 P){
    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);
    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);
    Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation
    vec4 ix = Pi.xzxz;
    vec4 iy = Pi.yyww;
    vec4 fx = Pf.xzxz;
    vec4 fy = Pf.yyww;
    vec4 i = permute(permute(ix) + iy);
    vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...
    vec4 gy = abs(gx) - 0.5;
    vec4 tx = floor(gx + 0.5);
    gx = gx - tx;
    vec2 g00 = vec2(gx.x,gy.x);
    vec2 g10 = vec2(gx.y,gy.y);
    vec2 g01 = vec2(gx.z,gy.z);
    vec2 g11 = vec2(gx.w,gy.w);
    vec4 norm = 1.79284291400159 - 0.85373472095314 *
    vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));
    g00 *= norm.x;
    g01 *= norm.y;
    g10 *= norm.z;
    g11 *= norm.w;
    float n00 = dot(g00, vec2(fx.x, fy.x));
    float n10 = dot(g10, vec2(fx.y, fy.y));
    float n01 = dot(g01, vec2(fx.z, fy.z));
    float n11 = dot(g11, vec2(fx.w, fy.w));
    vec2 fade_xy = fade(Pf.xy);
    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
    //return 2.3 * n_xy;
    return n_xy;
}

void main(void){
    int fieldSize = 66;
    int x = int(gl_GlobalInvocationID.x);
    int y = int(gl_GlobalInvocationID.y);
    int z = int(gl_GlobalInvocationID.z);

    vec3 local_pos = vec3(x, y, z);
    vec3 world_pos = local_pos * simpleScale + offcet;
    float noise = Density_Func(vec2(world_pos.x, world_pos.z));
    float MAX_HEIGHT = 20.0f;
    float density = world_pos.y - noise * MAX_HEIGHT - 40;
    int material = density < 0.0f ? 1 : 0;
    int index = x + (y * fieldSize) + (z * fieldSize * fieldSize);
    cornerMaterials.elem[index] = material;

    //cornerMaterials.elem[index] = int(index);
}